openapi: 3.0.0
info:
  title: GitHub Secret Detector API
  description: |
    API for detecting secrets in GitHub repositories.
    This API helps identify potential secrets and sensitive information in GitHub repositories,
    including API keys, AWS credentials, GitHub tokens, and SSH keys.
  version: 1.0.0
  contact:
    name: GitHub Secret Detector Team
    url: https://github.com/sitraj/secret-detection
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://your-production-url.com
    description: Production server
tags:
  - name: Scanning
    description: Endpoints for scanning repositories for secrets
  - name: Reports
    description: Endpoints for generating reports of found secrets
security:
  - GitHubToken: []
paths:
  /scan:
    post:
      summary: Scan a repository for secrets
      description: |
        Scans a GitHub repository for potential secrets and sensitive information.
        The scan can be configured to look at the current state, recent commits, and pull requests.
      tags:
        - Scanning
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - repository
              properties:
                repository:
                  type: string
                  description: Repository name in format owner/repo
                  example: octocat/Hello-World
                days:
                  type: integer
                  description: Number of days to look back in history
                  default: 30
                  minimum: 1
                  maximum: 365
                  example: 30
                scan_commits:
                  type: boolean
                  description: Whether to scan commit history
                  default: true
                  example: true
                scan_pulls:
                  type: boolean
                  description: Whether to scan pull requests
                  default: true
                  example: true
                include_ignored:
                  type: boolean
                  description: Whether to include files that would normally be ignored
                  default: false
                  example: false
      responses:
        '200':
          description: Successful scan
          headers:
            X-RateLimit-Limit:
              description: The maximum number of requests per hour
              schema:
                type: integer
                example: 1000
            X-RateLimit-Remaining:
              description: The number of requests remaining in the current rate limit window
              schema:
                type: integer
                example: 999
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: success
                  message:
                    type: string
                    example: Found 3 potential secrets
                  secrets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Secret'
                  scan_metadata:
                    type: object
                    properties:
                      scan_duration:
                        type: number
                        description: Time taken to complete the scan in seconds
                        example: 2.5
                      files_scanned:
                        type: integer
                        description: Total number of files scanned
                        example: 42
                      total_commits:
                        type: integer
                        description: Total number of commits scanned
                        example: 100
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          headers:
            Retry-After:
              description: Number of seconds to wait before retrying
              schema:
                type: integer
                example: 60
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /report:
    post:
      summary: Generate an HTML report of secrets found
      description: |
        Generates an HTML report of secrets found in a GitHub repository.
        The report includes details about each secret found, including its type, location, and context.
      tags:
        - Reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - repository
              properties:
                repository:
                  type: string
                  description: Repository name in format owner/repo
                  example: octocat/Hello-World
                days:
                  type: integer
                  description: Number of days to look back in history
                  default: 30
                  minimum: 1
                  maximum: 365
                  example: 30
                scan_commits:
                  type: boolean
                  description: Whether to scan commit history
                  default: true
                  example: true
                scan_pulls:
                  type: boolean
                  description: Whether to scan pull requests
                  default: true
                  example: true
                include_ignored:
                  type: boolean
                  description: Whether to include files that would normally be ignored
                  default: false
                  example: false
                report_format:
                  type: string
                  enum: [html, pdf, markdown]
                  default: html
                  description: Format of the generated report
      responses:
        '200':
          description: Report generated successfully
          headers:
            Content-Type:
              schema:
                type: string
                enum: [text/html, application/pdf, text/markdown]
                example: text/html
          content:
            text/html:
              schema:
                type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          headers:
            Retry-After:
              description: Number of seconds to wait before retrying
              schema:
                type: integer
                example: 60
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    GitHubToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: GitHub Personal Access Token for authentication
  schemas:
    Secret:
      type: object
      properties:
        file:
          type: string
          description: Path to the file containing the secret
          example: src/config/api_keys.json
        type:
          type: string
          enum: [api_key, aws_key, github_token, ssh_key, database_url, password]
          description: Type of secret
          example: api_key
        masked_secret:
          type: string
          description: The secret with sensitive parts masked
          example: "api_******key"
        context:
          type: string
          description: Context where the secret was found (e.g., branch name, commit SHA)
          example: main
        line_number:
          type: integer
          description: Line number in the file where the secret was found
          example: 42
        confidence:
          type: number
          description: Confidence score of the detection (0-1)
          minimum: 0
          maximum: 1
          example: 0.95
        timestamp:
          type: string
          format: date-time
          description: When the secret was found
          example: "2024-03-20T12:00:00Z"
    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
          example: error
        message:
          type: string
          description: Human-readable error message
          example: "Invalid repository format"
        error:
          type: string
          description: Detailed error information
          example: "Repository name must be in format 'owner/repo'"
        code:
          type: string
          description: Error code for programmatic handling
          example: "INVALID_REPO_FORMAT"
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2024-03-20T12:00:00Z" 